Description: Fix: make sure overlapping safe and unsafe exec rules conflict
 .
 BugLink: https://launchpad.net/bugs/1588069
 .
 Currently
 .
   change_profile /** -> A,
   change_profile unsafe /** -> A,
 .
 do not conflict because the safe rules only set the change_profile
 permission where the unsafe set unsafe exec. To fix this we have the
 safe version set exec bits as well with out setting unsafe exec.
 This allows the exec conflict logic to detect any conflicts.
 .
 This is safe to do even for older kernels as the exec bits off of the
 2nd term encoding in the change_onexec rules are unused.
 .
 Test files
   tst/simple_tests/change_profile/onx_no_conflict_safe1.sd
   tst/simple_tests/change_profile/onx_no_conflict_safe2.sd
 by Christian Boltz <apparmor@cboltz.de>
 .
 Signed-off-by: John Johansen <john.johansen@canonical.com>
 Acked-by: Tyler Hicks <tyhicks@canonical.com>
Origin: commit, revision id: john.johansen@canonical.com-20160603052422-f0w86rfqjjfimczj
Author: John Johansen <john.johansen@canonical.com>
Last-Update: 2016-06-03
X-Bzr-Revision-Id: john.johansen@canonical.com-20160603052422-f0w86rfqjjfimczj

=== modified file 'parser/parser_yacc.y'
--- old/parser/parser_yacc.y	2016-05-31 20:38:36 +0000
+++ new/parser/parser_yacc.y	2016-06-03 05:24:22 +0000
@@ -1486,15 +1486,16 @@
 		char *exec = $3;
 		char *target = $4;
 
-		if (exec_mode != EXEC_MODE_EMPTY) {
-			if (!exec)
-				yyerror(_("Exec condition is required when unsafe or safe keywords are present"));
-
-			if (exec_mode == EXEC_MODE_UNSAFE) {
-				mode |= (AA_EXEC_BITS | ALL_AA_EXEC_UNSAFE);
-			} else if (exec_mode == EXEC_MODE_SAFE &&
-				   !kernel_supports_stacking &&
-				   warnflags & WARN_RULE_DOWNGRADED) {
+		if (exec) {
+			/* exec bits required to trigger rule conflict if
+			 * for overlapping safe and unsafe exec rules
+			 */
+			mode |= AA_EXEC_BITS;
+			if (exec_mode == EXEC_MODE_UNSAFE)
+				mode |= ALL_AA_EXEC_UNSAFE;
+			else if (exec_mode == EXEC_MODE_SAFE &&
+				 !kernel_supports_stacking &&
+				 warnflags & WARN_RULE_DOWNGRADED) {
 				pwarn("downgrading change_profile safe rule to unsafe due to lack of necessary kernel support\n");
 				/**
 				 * No need to do anything because 'unsafe' exec
@@ -1502,8 +1503,8 @@
 				 * change_profile rules in non-stacking kernels
 				 */
 			}
-		}
-
+		} else if (exec_mode != EXEC_MODE_EMPTY)
+			yyerror(_("Exec condition is required when unsafe or safe keywords are present"));
 		if (exec && !(exec[0] == '/' || strncmp(exec, "@{", 2) == 0))
 			yyerror(_("Exec condition must begin with '/'."));
 

=== modified file 'parser/tst/equality.sh'
--- old/parser/tst/equality.sh	2015-07-11 01:21:07 +0000
+++ new/parser/tst/equality.sh	2016-06-03 05:24:22 +0000
@@ -460,10 +460,24 @@
 
 verify_binary_equality "change_profile == change_profile -> **" \
 		       "/t { change_profile, }" \
-		       "/t { change_profile -> **, }" \
+		       "/t { change_profile -> **, }"
+
+verify_binary_equality "change_profile /** == change_profile /** -> **" \
 		       "/t { change_profile /**, }" \
 		       "/t { change_profile /** -> **, }"
 
+verify_binary_equality "change_profile /** == change_profile /** -> **" \
+		       "/t { change_profile unsafe /**, }" \
+		       "/t { change_profile unsafe /** -> **, }"
+
+verify_binary_equality "change_profile /** == change_profile /** -> **" \
+		       "/t { change_profile /**, }" \
+		       "/t { change_profile safe /** -> **, }"
+
+verify_binary_inequality "change_profile /** == change_profile /** -> **" \
+			 "/t { change_profile /**, }" \
+			 "/t { change_profile unsafe /**, }"
+
 verify_binary_equality "profile name is hname in rule" \
 	":ns:/hname { signal peer=/hname, }" \
 	":ns:/hname { signal peer=@{profile_name}, }"

=== added file 'parser/tst/simple_tests/change_profile/onx_conflict_unsafe1.sd'
--- old/parser/tst/simple_tests/change_profile/onx_conflict_unsafe1.sd	1970-01-01 00:00:00 +0000
+++ new/parser/tst/simple_tests/change_profile/onx_conflict_unsafe1.sd	2016-06-03 05:24:22 +0000
@@ -0,0 +1,8 @@
+#
+#=DESCRIPTION test for conflict safe and unsafe exec condition
+#=EXRESULT FAIL
+#
+/usr/bin/foo {
+   change_profile /onexec -> /bin/foo,
+   change_profile unsafe /onexec -> /bin/foo,
+}

=== added file 'parser/tst/simple_tests/change_profile/onx_conflict_unsafe2.sd'
--- old/parser/tst/simple_tests/change_profile/onx_conflict_unsafe2.sd	1970-01-01 00:00:00 +0000
+++ new/parser/tst/simple_tests/change_profile/onx_conflict_unsafe2.sd	2016-06-03 05:24:22 +0000
@@ -0,0 +1,8 @@
+#
+#=DESCRIPTION test for conflict safe and unsafe exec condition
+#=EXRESULT FAIL
+#
+/usr/bin/foo {
+   change_profile safe /onexec -> /bin/foo,
+   change_profile unsafe /onexec -> /bin/foo,
+}

=== added file 'parser/tst/simple_tests/change_profile/onx_no_conflict_safe1.sd'
--- old/parser/tst/simple_tests/change_profile/onx_no_conflict_safe1.sd	1970-01-01 00:00:00 +0000
+++ new/parser/tst/simple_tests/change_profile/onx_no_conflict_safe1.sd	2016-06-03 05:24:22 +0000
@@ -0,0 +1,8 @@
+#
+#=DESCRIPTION 'safe' and unspecified exec condition shouldn't conflict because 'safe' is the default
+#=EXRESULT PASS
+#
+/usr/bin/foo {
+   change_profile safe /onexec -> /bin/foo,
+   change_profile /onexec -> /bin/foo,
+}

=== added file 'parser/tst/simple_tests/change_profile/onx_no_conflict_safe2.sd'
--- old/parser/tst/simple_tests/change_profile/onx_no_conflict_safe2.sd	1970-01-01 00:00:00 +0000
+++ new/parser/tst/simple_tests/change_profile/onx_no_conflict_safe2.sd	2016-06-03 05:24:22 +0000
@@ -0,0 +1,8 @@
+#
+#=DESCRIPTION 'safe' and 'unsafe' for the same exec condition, but different exec targets
+#=EXRESULT PASS
+#
+/usr/bin/foo {
+   change_profile safe /onexec -> /bin/foo,
+   change_profile unsafe /onexec -> /bin/bar,
+}

