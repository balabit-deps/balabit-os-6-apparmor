Description: test for 4.8 semantic change due to binfmt_elf changing when it does mmap
 .
 exec_stack picked up a fix to address a semantic change introduced in
 4.8 kernels.
 .
 However older kernels don't need the extra permission and the exec_stack
 test is the only test we currently have that caught the semantic change.
 .
 Keep exec_stack to the minimum set of permissions needed for a given
 kernel. Which allows us to use exec_stack as a test to detect the
 semantic change showing up in unexpected place until we have a test
 specifically designed for this.
 .
 Signed-off-by: John Johansen <john.johansen@canonical.com>
 Acked-by: Seth Arnold <seth.arnold@canonical.com>
 Acked-by: Tyler Hicks <tyhicks@canonical.com>
Origin: commit, revision id: john.johansen@canonical.com-20161005174949-ihoz2d4y80urowfm
Author: John Johansen <john.johansen@canonical.com>
Bug: https://launchpad.net/bugs/1630069
Last-Update: 2016-10-05
X-Bzr-Revision-Id: john.johansen@canonical.com-20161005174949-ihoz2d4y80urowfm

=== modified file 'tests/regression/apparmor/exec_stack.sh'
--- old/tests/regression/apparmor/exec_stack.sh	2016-09-29 04:11:29 +0000
+++ new/tests/regression/apparmor/exec_stack.sh	2016-10-05 17:49:49 +0000
@@ -43,6 +43,12 @@
 
 touch $file $otherfile $sharedfile $thirdfile
 
+if [ "$(kernel_features domain/fix_binfmt_elf_mmap)" == "true" ]; then
+    elfmmap="m"
+else
+    elfmmap=""
+fi
+
 # Verify file access and contexts by an unconfined process
 runchecktest "EXEC_STACK (unconfined - file)" pass -f $file
 runchecktest "EXEC_STACK (unconfined - otherfile)" pass -f $otherfile
@@ -66,7 +72,7 @@
 
 # Verify file access and contexts by 2 stacked profiles
 genprofile -I $fileok $sharedok $getcon $test:"ix -> &$othertest" -- \
-	image=$othertest addimage:$test $otherok $sharedok $getcon $test:rm
+	image=$othertest addimage:$test $otherok $sharedok $getcon $test:r$elfmmap
 runchecktest_errno EACCES "EXEC_STACK (2 stacked - file)" fail -- $test -f $file
 runchecktest_errno EACCES "EXEC_STACK (2 stacked - otherfile)" fail -- $test -f $otherfile
 runchecktest_errno EACCES "EXEC_STACK (2 stacked - thirdfile)" fail -- $test -f $thirdfile
@@ -79,7 +85,7 @@
 # Verify file access and contexts by 3 stacked profiles
 genprofile -I $fileok $sharedok $getcon $test:"ix -> &$othertest" -- \
 	image=$othertest addimage:$test $otherok $sharedok $getcon $test:"rix -> &$thirdtest" -- \
-	image=$thirdtest addimage:$test $thirdok $sharedok $getcon $test:rm
+	image=$thirdtest addimage:$test $thirdok $sharedok $getcon $test:r$elfmmap
 runchecktest_errno EACCES "EXEC_STACK (3 stacked - file)" fail -- $test -- $test -f $file
 runchecktest_errno EACCES "EXEC_STACK (3 stacked - otherfile)" fail -- $test -- $test -f $otherfile
 runchecktest_errno EACCES "EXEC_STACK (3 stacked - thirdfile)" fail -- $test -- $test -f $thirdfile
@@ -89,7 +95,7 @@
 
 genprofile -I $sharedok $stackotherok $stackthirdok $test:"rix -> &$othertest" -- \
 	image=$othertest addimage:$test $sharedok $stackthirdok $test:"rix -> &$thirdtest" -- \
-	image=$thirdtest addimage:$test $sharedok $stackthirdok $test:rm
+	image=$thirdtest addimage:$test $sharedok $stackthirdok $test:r$elfmmap
 # Triggered an AppArmor WARN in the initial stacking patch set
 runchecktest "EXEC_STACK (3 stacked - old AA WARN)" pass -p $othertest -- $test -p $thirdtest -f $sharedfile
 
@@ -120,7 +126,7 @@
 
 # Verify file access and contexts in mixed mode
 genprofile -I $fileok $sharedok $getcon $test:"ix -> &$othertest" -- \
-	image=$othertest flag:complain addimage:$test $otherok $sharedok $getcon $test:rm
+	image=$othertest flag:complain addimage:$test $otherok $sharedok $getcon $test:r$elfmmap
 runchecktest "EXEC_STACK (mixed mode - file)" pass -- $test -f $file
 runchecktest_errno EACCES "EXEC_STACK (mixed mode - otherfile)" fail -- $test -f $otherfile
 runchecktest "EXEC_STACK (mixed mode - sharedfile)" pass -- $test -f $sharedfile

